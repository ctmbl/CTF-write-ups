# Values found:
p = 24795949646412528786382740741115709375057213469917380559071134585830879596738798609052960526541467047484117879658555317532897991386468917030412870010069895965337568057881403778387111294322084697904749593410747711647285048773305936124312077699096344937954502398504528167376247659474301224251819572909873744852529081966281042016503825562838665028244981194148836350923440470007805132596915028095923241510029900902792455343463446521734175466099346044893303711052010400379052647189030382265625582788293269410826556113389483619550933859762326471601708003737190385579128960568198832149654980156438557406235603445105093936229
q = 24795949646412528786382740741115709375057213469917380559071134585830879596738798609052960526541467047484117879658555317532897991386468917030412870010069895965337568057881403778387111294322084697904749593410747711647285048773305936124312077699096344937954502398504528167376247659474301224251819572909873744852529081966281042016503825562838665028244981194148836350923440470007805132596915028095923241510029900902792455343463446521734175466099346044893303711052010400379052647189030382265625582788293269410826556113389483619550933859762326471601708003737190385579128960568198832149654980156438557406235603445105093936459
d = 197575596126584728854487170273081610799746187065439831699987762638012243781085328416839852561512239303463405105985443474461684105009131836189654753694880377198868321081414742205168188333674947794697317687756173377059303999275617887668426063603077686259913748271527021706405341858320783214290589341352287992348955066836498312664493282343448667840220521431054478162168197275181770827115521439898635682855294443082178031222022702707241999221796223094952400025858194022584297997638007736770336893951756653537546322889646803236430436896462639916198956249509188919128978479975501407977717583692393338532552693968998847734820346982426431092778423726549438516670904396034731807312539159209029993719427199345852700641128584821511558762659238305120633805845700519856511894632374173942674595285272268341915182645701600098025848799757289094031197514341537184684793492351014031268344367863386541328957610736835564840171784857008359478547982379024843020115311284703780066028715663972688829147956219278179250369465223328174087712343072539567455646651732565813051996416952308254065715774250479027778581859958821936796697629872199296097743795304756524881855562573210727080489643325784501108819294767545025562654757465456129531081321814815615015218593
u = 2048361057747121943222922061222602078809074156210566220097180683177333531904509450313070652192555973487818433537011091448369834071056127928599324044310121840614842578694550746910239628661389605479088009890453071831732243159533968636356215114273176320961458893789504500783255241434833579394715529936033048487817619814605825210059011676930150589289802794299251698554545082304992597910179937103576267776915513552839376745764371669186736234156032934143359871782557380900878262159093814187160374230337270081763932896323479081615077144936887838958401965526115727504362827177372947003667150534662315611819462893291290368664
phi = 614839118867425611345514039799950119989694485361240752617383570750589193764529400211511558277484692651048489099286230246239097397435112685107379087982021618256516294335834660963917737835900050029490888380934298889474625175713493328780894536104221382925734440668141805392815141945335668068136863896685892599932263448018214146110773800804491706754251296914863121334948582375289065275245485688824163663214028106185978235147089357422816662060724552372929508095663269784335571598822512490252496154744362573736475468338973530090500548095131625460015716796015371044299898511023477482176432919394510077274829340201627610826064628688854749027892666465663369044019993418942460515472074020754140489002378934640510372360761826374520561568300023779804889730945378678529735044564193078712301279734610097356319816004337405775133905640536251441382839102440708569453338609126704965205768510762714328541115618939220912294887856798374019712516577453663396819054945663135405232066663745003708822216030709536278895131227081731174985109393539649840092151691101479852326148583941283288067655018853449384782759703519530544721992999474564352723543927487551204709504653578371862330201792718040781062141031395090139615370600190579219424429087738726066536200424

# challenges values:
e = 65537
c = 0x93279830576c7290458b2b15f908d0ddab99d36da62c02744145f124223f748722b49df2914445fd10a0b58a64d7ec84445d7df9de5eea7ae1bb24fc87a51112dd35441688c253f4b44df0cea7e659dc5b73242a1d7aaa8ebf9eb5d22251d9c07afbd7a77f780d9ca702f5bbdbaad9958718aa5658931fc738b48aba963d3312acb0b4220476a05f2fc6f8345a5bc4fc3e8516d78dc52fe876d5e2593b194b21d9b6506b915fa51486cb04874e612fdcd893f9066cbe23c0436b1fc589e007bb5bcc1fa3c4dad53a037030ae2c2445e88290641021edb41c8c5fb6875379227f3117d96b830349a0bf297b6a89ba78ba3b8a7f9d141be21f9b38c720fc2164267ec8770c03940ff414ff7e76251df06ef2225cce4ca939381ebecf61c1ff022ed85ed79d78f921a42cec641c6721b9d81a9ab676a0fcbfe09e17079d8de28c6d0d8b9be94ba49234227c0fe2b82297affa9ef8fe9480b750a55a79fd181d4dd0807356255a7dbca571f626670e588e5705cdf2a479bd12b486d97b9d3fb0d5949653be00cef05c5b973f2ed161dc6e79b76f9a26a96ee6d45c210e407c317ccdbf9ee3e7c76d783082503cdceeb8f3414990d22a454c7bcfa3ee3435e031b525a8178dbcb1645d01ad227c4fa603b5d27734af2733a53db9402966fa306f4fb84fb9b7cb6638faaa0360fe21da900aa7fb3ae537f2fc417882f40924edcdd110
n = 614839118867425611345514039799950119989694485361240752617383570750589193764529400211511558277484692651048489099286230246239097397435112685107379087982021618256516294335834660963917737835900050029490888380934298889474625175713493328780894536104221382925734440668141805392815141945335668068136863896685892599932263448018214146110773800804491706754251296914863121334948582375289065275245485688824163663214028106185978235147089357422816662060724552372929508095663269784335571598822512490252496154744362573736475468338973530090500548095131625460015716796015371044299898511023477482176432919394510077274829340201627610826114220588147574085465431947145600462770107845882295276590216289925802248195856531858616293413844760469488797327617134414870685713718316512590560784584332870642976415850372904913094038592981575170943404827357746864677409199987320441701962764524897655081677515559723384875868114258169514743391495944193767202221635617595958903087953314261082562123153707392006494917877590476294505396420911787366831592413599451645677062378028372895794499516139975377854262440957470185540864997897591309253244165051150891545197039714330171948606521297896515273405208725515161833299289316226537279669910150892096539241558945616276724073111

"""
The two prime are too close, so the sqare root of n will be right between them

We just have to compute the square root of n and then inverse the algorith that 
created the primes (we have the script in the challenge): we substract 1 until
the number is prime and just like that we get p, once we have it we can compute q
and decrypt the cipher: https://en.wikipedia.org/wiki/RSA_(cryptosystem)#Decryption.

The only difficulty here is the the size of the integers involved that forces us
to use a special library to perform the calculation: gmpy (the implementation of 
https://gmplib.org/ in python)

PS: You also should look at the author's solution that uses the libraries better than me
"""

from gmpy2 import *

print("Calculating sqrt(n)")
n = mpz(n)
s, r = isqrt_rem(n)

print("n == s**2 + r")
print(n == square(s) +r)

print("Finding p and q")
p = s - 1
while not is_prime(p):
    p -= 1

q = divexact(n,p)

print("n == p * q")
print(n == p*q)

print("Decrypting cipher")
m = pow(c,d,n)
print(f"m (decimal) = {m}")
print(f"m (hex) = {hex(m)}")
msg = hex(m)[2:]
plain = "".join([chr(int(msg[i]+msg[i+1],base=16)) for i in range(0, len(msg), 2)])
print("flag:",plain)